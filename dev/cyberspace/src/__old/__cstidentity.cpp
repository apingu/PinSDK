//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
#include "CstIdentity.h"
#include "CsProtocol.h"
#include "MessageDispatcher.h"
#include <memio.inl>

#include <assert.h>

namespace Cyberspace
{

	struct ServerMessageData
	{
		unsigned int eid;
		channelid_t  channelid;
		std::vector< char > buff;
	};


    //===============================================================================//
    //
    //
    //===============================================================================//
	CsIdentity::CsIdentity( connectionid_t id )
	{ 
		cid     = id;
		m_Username="";
		m_bValidation = false;
		m_Power = 0;
		//m_CommBuff=NULL;
		m_RecvTime=0;
		m_SafeCounter=0;
		m_Key=NULL;
	}


    //===============================================================================//
    //
    //
    //===============================================================================//
	CsIdentity::CsIdentity()
	{
		cid     = CsINVALID_ID;
		m_Username="";
		m_bValidation = false;
		m_Power = 0;
		//m_CommBuff=NULL;
		m_Key=NULL;
	}


    //===============================================================================//
    //
    //
    //===============================================================================//
	CsIdentity::~CsIdentity()
	{
		Clear();
		Close();
		//delete accname;
		/*
        std::map< EntityId_t, CsEntity* >::iterator iter = m_Entities.begin();
	    while( iter != m_Entities.end() )
		{
		    SAFE_DELETE( iter->second );
			iter++;
		}
		*/
		//m_Username[0]='\0';	// clear, there may be some bug
		//SAFE_DELETE_ARRAY( m_Username );
		
	}

    //===============================================================================//
    //
    //
    //===============================================================================//#includ
    void CsIdentity::OnCreate( void )
	{
		m_bValidation = false;
		m_RecvTime=0;
		m_SafeCounter=0;
	}

    //===============================================================================//
    //
    //
    //===============================================================================//
    void CsIdentity::OnClose( void )
	{
		m_bValidation = false;
	}

    //===============================================================================//
    //
    //
    //===============================================================================//
//	void CsIdentity::SetId( connectionid_t id )
//	{
//		m_AId     = id;
//	}

    //===============================================================================//
    //
    //
    //===============================================================================//
	void CsIdentity::SetCId( connectionid_t id )
	{
		cid = id;
	}

    //===============================================================================//
    //
    //
    //===============================================================================//
	connectionid_t CsIdentity::GetCId( void )
	{
		return cid;
	}

    //===============================================================================//
    //
    //
    //===============================================================================//
	void CsIdentity::SetMId( MacAddress_t m )
	{
	    mid = m;
	}

    //===============================================================================//
    //
    //
    //===============================================================================//
	MacAddress_t CsIdentity::GetMId( void )
	{
		return mid;
	}


    //===============================================================================//
    //
    //
    //===============================================================================//
	void CsIdentity::SetUsername( const char* username )
	{
		m_Username= username;
	}

	
    //===============================================================================//
    //
    //
    //===============================================================================//
	const char* CsIdentity::GetUsername( void )
	{
		return m_Username.c_str();
	}


//    //===============================================================================//
//    //
//    //
//    //===============================================================================//
//	void CsIdentity::SetValidation( bool b )
//	{
//		m_bValidation = b;
//	}
//
//
//    //===============================================================================//
//    //
//    //
//    //===============================================================================//
//	bool CsIdentity::GetValidation( void )
//	{
//		return m_bValidation;
//	}


   //===============================================================================//
    //
    //
    //===============================================================================//
	void CsIdentity::SetPower( int b )
	{
		m_Power = b;
	}

    //===============================================================================//
    //
    //
    //===============================================================================//
	int CsIdentity::GetPower( void )
	{
		return m_Power;
	}


    //===============================================================================//
    //
    //
    //===============================================================================//
	void CsIdentity::Clear( void )
	{
		//TS_Lock lock( &m_Lock );
		cid=CsINVALID_ID;      //每次分配的
		m_Power=-1;            // 權力代號
		m_Username="";
		m_bValidation=false;
		m_Key=NULL;

//		TS_Lock block( &m_BufflLock );
//		
//		for( UINT i=0; i< m_CommList.size(); i++ )
//		{
//			SAFE_DELETE( m_CommList[i] );
//		}
//		m_CommList.clear();

		//DeleteBuffer();
		return;
	}
	
    
// 	//===============================================================================//
//     //
//     //
//     //===============================================================================//
// 	CsCommandPacket* CsIdentity::CreateBuffer( void )
// 	{
// 		TS_Lock lock( &m_lCommBuff );
// 		SAFE_DELETE( m_CommBuff );
// 		m_CommBuff = new CsCommandPacket;
// 		IOMEMSET(m_CommBuff, 0, _MAX_SOCKET_BUFF );
// 		return m_CommBuff;
// 	}
// 
// 	//===============================================================================//
// 	//
// 	//
// 	//===============================================================================//
// 	CsCommandPacket* CsIdentity::GetBuffer( void )
// 	{
// 		TS_Lock lock( &m_lCommBuff );
// 		if( m_CommBuff==NULL )
// 		{
// 			m_CommBuff = new CsCommandPacket;
// 		}
// 		IOMEMSET(m_CommBuff, 0, _MAX_SOCKET_BUFF );
// 		return m_CommBuff; 
// 	}
// 
//     //===============================================================================//
//     //
//     //
//     //===============================================================================//
// 	void CsIdentity::DeleteBuffer( void )
// 	{
// 		TS_Lock lock( &m_lCommBuff );
// 		SAFE_DELETE( m_CommBuff );
// 	}

    //===============================================================================//
    //
    //
    //===============================================================================//
	int CsIdentity::GetUsed( void )
	{
		TS_Lock lock(&m_lUsed);
		return m_Used;
	}

    //===============================================================================//
    //
    //
    //===============================================================================//
	void CsIdentity::AddUsed( int u )
	{
		TS_Lock lock(&m_lUsed);
		m_Used+=u;
	}

    //===============================================================================//
    //
    //
    //===============================================================================//
	bool CsIdentity::WaitForSingleUsed( int block )
	{
		int times=0;
		while(1)
		{
			{
				TS_Lock lock(&m_lUsed);
				if( m_Used<=0 )
					return true;
				times++;
				if( block!=0 )
				{
					if( times>block )
					{
						return false;
					}
				}
			}
			sleep(20);
		}
	}

}

