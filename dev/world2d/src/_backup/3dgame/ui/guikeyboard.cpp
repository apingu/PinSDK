//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
#include "GuiKeyBoard.h"

namespace GUI
{

//==========================================================================================
//  Name :
//  Desc :
//==========================================================================================
KeyBoard::KeyBoard()
{
    SetMapping( &m_BtMap, m_BtRect );
}

    
//==========================================================================================
//  Name :
//  Desc :
//==========================================================================================
KeyBoard::~KeyBoard()
{
         
} 

//==========================================================================================
//  Name :
//  Desc :
//==========================================================================================
void KeyBoard::SetMapping( PT::Array2d<char>* map, LG::Rect* keypos )
{
    map->allot( 15, 6 );
}

//==========================================================================================
//  Name :
//  Desc :
//==========================================================================================
void KeyBoard::LoadImage( const char* filename )
{
    OnLoadImage( filename, &m_Image );
}

//==========================================================================================
//  Name :
//  Desc :
//==========================================================================================
void KeyBoard::MoveUp( void )
{
    char nowkey = GetCurKey();
        
    while( m_BtMap(m_CurSel.x, m_CurSel.y) )
    {
        if( ( m_CurSel.y-1 ) >= 0 )
        {
            m_CurSel.y--;
        }
    }
}

//==========================================================================================
//  Name :
//  Desc :
//==========================================================================================
void KeyBoard::MoveDown( void )
{
    if( ( m_CurSel.y+1 ) < m_BtMap.row_size() )
    {
        m_CurSel.y++;
    }
}

//==========================================================================================
//  Name :
//  Desc :
//==========================================================================================
void KeyBoard::MoveLeft( void )
{
    if( ( m_CurSel.x-1 ) >= 0 )
    {
        m_CurSel.x--;
    }
}

//==========================================================================================
//  Name :
//  Desc :
//==========================================================================================
void KeyBoard::MoveRight( void )
{
    if( ( m_CurSel.y+1 ) < m_BtMap.col_size() )
    {
        m_CurSel.x++;
    }
}
        
//==========================================================================================
//  Name :
//  Desc :
//==========================================================================================
char KeyBoard::GetCurKey( void )
{
    return m_BtMap(m_CurSel.x,m_CurSel.y);
}

//==========================================================================================
//  Name :
//  Desc :
//==========================================================================================
void KeyBoard::Render( const LG::Rect& rect )
{
    OnRenderImage(&m_Image, rect );
	LG::Rect rt;
	rt = m_BtRect[ m_BtMap(m_CurSel.x, m_CurSel.y) ] + m_CurSel;
	//rect.top += m_CurSel.y;
	//rect.left += m_CurSel.x;
	//rect.right += m_CurSel.x;
	//rect.bottom += m_CurSel.y;
	OnRenderSel( &rt );
}

//==========================================================================================
//  Name :
//  Desc :
//==========================================================================================
void KeyBoard::Update( void )
{
    return;
}




#include <Camera.h>
#include <RenderGraphic3D.h>

void RwKeyBoard::OnLoadImage( const char* filename, tImage* image )
{
	m_Texture.Load( filename );
}

void RwKeyBoard::OnRenderSel( const LG::Rect* rect )
{

}

void RwKeyBoard::OnRenderImage( const tImage* image, const LG::Rect& rect )
{
	m_Camera.Render( &m_Texture, rect );
}

};// namespace GUI
