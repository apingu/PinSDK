//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
#include "Figure.h"



//=============================================================================
//  Name : Constructure
//  Desc :
//=============================================================================
CPFigure::CPFigure()
{
	m_curModel = 0;
}


//=============================================================================
//  Name : Distructure
//  Desc :
//=============================================================================
CPFigure::~CPFigure()
{
	for( int i = 0; i < m_modelvec.size(); i++ )
		delete m_modelvec[i];
	m_modelvec.clear();
}


//=============================================================================
//  Name :
//  Desc :
//=============================================================================
CPModel* CPFigure::Model( Pvoid )
{
	if( m_curModel < m_modelvec.size() )
	    return m_modelvec[ m_curModel ];
	return NULL;
}


//=============================================================================
//  Name :
//  Desc :
//=============================================================================
Pint CPFigure::LoadModel( Pcstr szFilename )
{
	CPModel* model = new CPModel;

	if( !model->Load( szFilename ) )
		return FALSE;

	m_modelvec.push_back( model );
	return TRUE;
}










///////////////////////////////////////////////////////////////////////////////
//


//=============================================================================
//  Name : Constructure
//  Desc :
//=============================================================================
CPAction::CPAction()
{
	m_nHAnimCurSeqs =  0;
	m_nHAnimBlend   = -1;
	m_pHAnimNow     = NULL;
}


//=============================================================================
//  Name : Distructure
//  Desc :
//=============================================================================
CPAction::~CPAction()
{
	for( int i = 0; i < m_pHAnimSeqs.size(); i++ )
		delete m_pHAnimSeqs[i];
	m_pHAnimSeqs.clear();
	m_pHAnimNow = NULL;
}


//=============================================================================
//  Name : 
//  Desc :
//=============================================================================
CPAction::operator CPAnim* ()
{
	if( m_nHAnimCurSeqs < m_pHAnimSeqs.size() )
	    return m_pHAnimSeqs[m_nHAnimCurSeqs];
	return NULL;
}



//=============================================================================
//  Name : 
//  Desc :
//=============================================================================
Pint CPAction::Do( Puint curAnim )
{
	if( curAnim >= m_pHAnimSeqs.size() )
		return FALSE;

	//m_nHAnimCurSeqs = curAnim;
	m_nHAnimBlend = curAnim;
	//m_pHAnimSeqs[m_nHAnimCurSeqs]->Transform( Model() );
	m_pHAnimNow = new CPAnim;
	m_pHAnimNow->BeginBlend( Model(), m_pHAnimSeqs[m_nHAnimCurSeqs], m_pHAnimSeqs[m_nHAnimBlend] );
	//m_pHAnimNow = m_pHAnimSeqs[ curAnim ];
	//m_pHAnimNow->Transform( Model() );
	
	return TRUE;
}


//=============================================================================
//  Name : 
//  Desc :
//=============================================================================

enum AnimationState
{
    FIRST,
    SECOND,
    BLEND,

    ANIMATIONSTATEFORCEENUMSIZEINT = RWFORCEENUMSIZEINT
};


static RpHAnimHierarchy *OutHierarchy = NULL;
static RpHAnimHierarchy *InHierarchy2 = NULL;

enum AnimationState CurrentAnimation = FIRST;

/*
 * Blending between the two animations will initially run over 1 second,,,
 */
RwReal BlendDuration = 1.0f;

static RpAtomic *
GetSkinHierarchy(RpAtomic *atomic, void *data)
{
#if (defined(RPSKIN310_H))
    RpSkin * const skin = RpSkinAtomicGetSkin(atomic);

    *(void **)data = (void *)RpSkinGetHAnimHierarchy(skin);
#else /* (defined(RPSKIN310_H)) */
    *(void **)data = (void *)RpSkinAtomicGetHAnimHierarchy(atomic);
#endif /* (defined(RPSKIN310_H)) */

    
    return NULL;
}

static RpAtomic *
SetHierarchyForSkinAtomic(RpAtomic *atomic, void *data)
{
#if (defined(RPSKIN310_H))
    RpSkinSetHAnimHierarchy(RpSkinAtomicGetSkin(atomic),
                            (RpHAnimHierarchy *)data);
#else /* (defined(RPSKIN310_H)) */
    RpSkinAtomicSetHAnimHierarchy(atomic, (RpHAnimHierarchy *)data);
#endif /* (defined(RPSKIN310_H)) */
    
    return atomic;
}

static RwFrame *
GetChildFrameHierarchy(RwFrame *frame, void *data)
{    
    RpHAnimHierarchy *hierarchy = *(RpHAnimHierarchy **)data;

    /*
     * Return the first hierarchy found that is attached to one of the atomic
     * frames...
     */

    hierarchy = RpHAnimFrameGetHierarchy(frame);
    if( hierarchy == NULL )
    {
        RwFrameForAllChildren(frame, GetChildFrameHierarchy, data);

        return frame;
    }

    *(void **)data = (void *)hierarchy;

    return NULL;
}


static RpHAnimHierarchy *
GetHierarchy(RpClump *clump)
{
    RpHAnimHierarchy *hierarchy = NULL;
    
    /*
     * Return the hierarchy for this model...
     */

    RwFrameForAllChildren(RpClumpGetFrame(clump), GetChildFrameHierarchy,
        (void *)&hierarchy);

    return hierarchy;
}




Pvoid CPAction::UpdateAnim( Pfloat delta )
{
	//blending
	/*
	if( m_nHAnimBlend >= 0 )
	{
		if( m_pHAnimNow->Blend( Model(), delta,
		                        m_pHAnimSeqs[m_nHAnimCurSeqs], 
				                m_pHAnimSeqs[m_nHAnimBlend] ) == 0 )
		{
			m_nHAnimCurSeqs = m_nHAnimBlend;
			m_nHAnimBlend = -1;
			delete m_pHAnimNow;
			m_pHAnimNow = m_pHAnimSeqs[m_nHAnimCurSeqs];
		}

	}
	*/


	//m_pHAnimNow->Update( Model(), delta );


	static RwReal blendDuration = 0.0f;
    static enum AnimationState previousAnimation = FIRST;
    static RpHAnimHierarchy *inHierarchy1 = NULL;
    static RtAnimAnimation *currentAnim1 = NULL;
    static RtAnimAnimation *currentAnim2 = NULL;

    /*
     * Updates in seconds the animation currently running by delta. If
     * the end of the current animation is reached we blend between the end of
     * the current animation with the start of the next animation. Once the
     * blend has finished the next animation will be running.
     */

    if( blendDuration <= 0.0f )
    {
        RwReal duration;

        /*
         * Blending between the animations is not required so run the current
         * animation...
         */

        RpClumpForAllAtomics( Model()->m_pClump, GetSkinHierarchy, (void *)&inHierarchy1);

        //currentAnim1 = RpHAnimHierarchyGetCurrentAnim(inHierarchy1);
		currentAnim1 = inHierarchy1->currentAnim->pCurrentAnim;
        duration = currentAnim1->duration;

        if( (inHierarchy1->currentAnim->currentTime + delta) >= duration )
        {
            /*
             * Adding delta to the current animation time will cause the
             * animation to loop as it will pass its duration. Adjust
             * delta so the animation will not loop...
             */
            delta = duration - inHierarchy1->currentAnim->currentTime;

            /*
             * Use an optimized version of RpHAnimHierarchyAddAnimTime as the
             * hierarchy has standard key frames...
             */
            RpHAnimHierarchyAddAnimTime(inHierarchy1, delta);

            /*
             * The animation has reached its end so get ready to blend
             * between the animations over BlendDuration seconds...
             */
            blendDuration = BlendDuration;

            previousAnimation = CurrentAnimation;
            CurrentAnimation = BLEND;

            /*
             * Find the next animation, assuming we only have two...
             */
            if( currentAnim1 == m_pHAnimSeqs[0]->GetAnim() )
            {
                RpHAnimHierarchySetCurrentAnim(InHierarchy2, m_pHAnimSeqs[1]->GetAnim());
            }
            else
            {
                RpHAnimHierarchySetCurrentAnim(InHierarchy2, m_pHAnimSeqs[0]->GetAnim());
            }
        }
        else
        {
            /*
             * Adding delta to the current animation will not cause 
             * it to loop...
             */

            RpHAnimHierarchyAddAnimTime(inHierarchy1, delta);
        }

        RpHAnimHierarchyUpdateMatrices(inHierarchy1);
    }

    if( blendDuration > 0.0f )
    {
        RwReal alpha;

        /*
         * Currently blending between two animations, storing the results in
         * OutHierarchy.
         */

        /*
         * Calculate the blending parameter, 0.0 to return the current
         * hierarchy and 1.0 to return the next hierarchy. If the
         * total blendDuration does not equal 1 second then scale
         * blendDuration by the total number of seconds the blend is to run,
         * so alpha remains in the range [0,1]...
         */
        alpha = 1.0f - blendDuration / BlendDuration;

        RpClumpForAllAtomics( Model()->m_pClump, SetHierarchyForSkinAtomic,
            (void *)OutHierarchy);

        RpHAnimHierarchyBlend(OutHierarchy, inHierarchy1, InHierarchy2,alpha);

        blendDuration -= delta;

        RpHAnimHierarchyUpdateMatrices(OutHierarchy);

        if( blendDuration <= 0.0f )
        {
            /*
             * Blending between the hierarchies has ended so switch to running
             * the next animation...
             */

            RpClumpForAllAtomics( Model()->m_pClump, SetHierarchyForSkinAtomic,
               (void *)inHierarchy1);

            //currentAnim2 = RpHAnimHierarchyGetCurrentAnim(InHierarchy2);
			currentAnim2 = InHierarchy2->currentAnim->pCurrentAnim;

            RpHAnimHierarchySetCurrentAnim(inHierarchy1,currentAnim2);

            RpHAnimHierarchyUpdateMatrices(inHierarchy1);

            blendDuration = 0.0f;

            if( previousAnimation == FIRST )
            {
                CurrentAnimation = SECOND;
            }
            else
            {
                CurrentAnimation = FIRST;
            }
        }
    }
    
	//m_pHAnimSeqs[m_nHAnimCurSeqs]->Update( Model(), delta );
	
	return;
}


//=============================================================================
//  Name : 
//  Desc :
//=============================================================================
Pint CPAction::LoadAnim( Pcstr szFilename )
{
	CPAnim* anim = new CPAnim;

	if( !anim->Load( szFilename ) )
		return FALSE;
	anim->Transform( Model() );
	m_pHAnimSeqs.push_back( anim );
	m_pHAnimNow = anim;



	RpHAnimHierarchy *hierarchy = NULL;
    hierarchy = GetHierarchy(Model()->m_pClump);

    //RpClumpForAllAtomics(Model()->m_pClump, SetHierarchyForSkinAtomic, (void *)hierarchy);


	//RpHAnimHierarchyFlag flags;
    //flags = (RpHAnimHierarchyFlag)hierarchy->flags;

    OutHierarchy = 
        RpHAnimHierarchyCreateFromHierarchy(hierarchy,
                                            (RpHAnimHierarchyFlag)hierarchy->flags, 
                                            hierarchy->currentAnim->maxKeyFrameSize);

    InHierarchy2 = 
        RpHAnimHierarchyCreateFromHierarchy(hierarchy,
                                            (RpHAnimHierarchyFlag)hierarchy->flags, 
                                            hierarchy->currentAnim->maxKeyFrameSize);

    /*
     * For the OutHierarchy the app will use the standard key frame callbacks...
     */
    RpHAnimHierarchySetKeyFrameCallBacks(OutHierarchy, rpHANIMSTDKEYFRAMETYPEID);

    /*
     * ...also give this hierarchy a parent frame. This requires the app to
     * set the parentFrame to NULL before a call to RpHAnimHierarchyDestroy...
     */
    OutHierarchy->parentFrame = hierarchy->parentFrame;


	return TRUE;
}
