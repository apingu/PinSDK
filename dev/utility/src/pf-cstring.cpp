//
//
//
//
//
//
//
//
//
//
//
//
//
//
//////////////////////////////////////////////////////////////////////////

//01. == C 系統文件/C++ 系統文件
#include <string.h>
#include <assert.h>
#include <stdio.h>
#include <stdarg.h>

//02. == 其他 PinSDK 函式庫的.h 文件 隱藏的放後面

//03. == 其他 使用 函式庫的.h 文件

//04. == 此專案內.h 文件
#include "pf-cstring.h"


namespace pfstd
{
    //=============================================================================
    // NAME:
    // DESC:
    //=============================================================================
    CString::CString()
    {
    }
    
    //=============================================================================
    // NAME:
    // DESC:
    //=============================================================================
    CString::~CString()
    {
    }
    
    //=============================================================================
    // NAME:
    // DESC:
    //=============================================================================
    CString::CString( const tchar_t* s )
    {
        TS_Lock lock( &utLock );
        
        if ( s != NULL )
        {
            _tstring::operator = ( s );
        }
    }
    
    //=============================================================================
    // NAME:
    // DESC:
    //=============================================================================
    CString::CString( const CString& s )
    {
        TS_Lock lock( &utLock );
        
        if ( !s.empty() )
        {
            _tstring::operator = ( s );
        }
    }
    
    //=============================================================================
    // NAME:
    // DESC:
    //=============================================================================
    CString::CString( const _tstring& s )
    {
        _tstring::operator = ( s );
    }
    
    //  //=============================================================================
    //  // NAME:
    //  // DESC:
    //  //=============================================================================
    //  CString CString::operator = (_mstring s)
    //  {
    //   _tstring::operator = (s);
    //   //assign(s);
    //   return s;
    //  }
    //
    //  //=============================================================================
    //  // NAME:
    //  // DESC:
    //  //=============================================================================
    //  CString CString::operator = (const tchar_t* s)
    //  {
    //   _tstring::operator = (s);
    //   return s;
    //  }
    
    //=============================================================================
    // NAME:
    // DESC:
    //=============================================================================
    const tchar_t CString::operator[]( int i )
    {
        TS_Lock lock( &utLock );
        return c_str()[i];
    }
    
    //=============================================================================
    // NAME:
    // DESC:
    //=============================================================================
    CString::operator const tchar_t* ()
    {
        return c_str();
    }
    
    //=============================================================================
    // NAME:
    // DESC:
    //=============================================================================
    void CString::format( const tchar_t* fm, ... )
    {
        TS_Lock lock( &utLock );
        tchar_t string[81920];
        va_list arglist;
        //const tchar_t* i = fm;
        va_start( arglist, fm );
        assert( string != NULL );
        assert( fm != NULL );
        vsnprintf( string, 81920, fm, arglist );
        va_end( arglist );
        assign( string );
        return;
    }
    
    //=============================================================================
    // NAME:
    // DESC:
    //=============================================================================
    int CString::toint( void )
    {
        TS_Lock lock( &utLock );
        return atoi( c_str() );
    }
    
    //=============================================================================
    // NAME:
    // DESC:
    //=============================================================================
    void CString::clear( void )
    {
        //erase(begin(), end());
        _tstring::clear();
    }
    
    //=============================================================================
    // NAME:
    // DESC:
    //=============================================================================
    const tchar_t* CString::copy( const tchar_t* sstr )
    {
        TS_Lock lock( &utLock );
        assign( sstr );
        return c_str();
    }
    
    //=============================================================================
    // NAME:
    // DESC:
    //=============================================================================
    void CString::cat( const tchar_t* s )
    {
        TS_Lock lock( &utLock );
        assign( s );
    }
    
    //=============================================================================
    // NAME:
    // DESC:
    //=============================================================================
    tchar_t CString::front( void )
    {
        TS_Lock lock( &utLock );
        return c_str()[0];
    }
    
    //=============================================================================
    // NAME:
    // DESC:
    //=============================================================================
    tchar_t CString::back( void )
    {
        TS_Lock lock( &utLock );
        return c_str()[strlen( c_str() ) - 1];
    }
    
    //
    // the destroy timing is wrong, too early
};

